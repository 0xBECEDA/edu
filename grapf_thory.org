* Интро
Шпаргалка по теории графов.

* Теория графов.

** Зачем нужны графы

Графы строят, чтоб отобразить отношения между элементами во множествах.

** Определение

Пусть V – (непустое) множество вершин, элементы v ∈ V – вершины. Граф G =
G(V) с множеством вершин V есть некоторое cемейство пар вида: e = (a, b),
где a,b∈ V, указывающих, какие вершины остаются соединёнными. Каждая пара
e = (a, b) - ребро графа. Множество U - множество рёбер графа. Вершины
a и b – концевые точки ребра.

Перевод на русский:
Есть некоторое мнодество вершин V, где каждая вершина v принадлежит
множеству V. Граф, который мы назовем G, будем обозначать как G(V) -
т.е. этот граф от множества вершин V - это некоторое некоторое множество
пар вида  e = (a, b), где а и b принадлежат к множеству V и указывают,
какие вершины оказываются соединенными. Т.е. граф мы можем выразить как
множество пар ребер, где вершины принадлежат к одному множеству и
являются коневыми точками ребра.

** Виды вершин и ребер графа

*** Дуга

Это направленное ребро - т.е. по нему можно двигаться в одном направлении

*** Звено

Это ненапрвленное ребро.

*** Петля

Это когда вершина соединена сама с собой ребром. При этом петля всегда
добавляет 2 к степени вершины.

*** Кратные ребра

Это ребра, соединяющие одну и ту де пару вершины между собой. Т.е. от
вершины а к вершине b ведет несколько ребер.

*** Голая вершина

Это вершина, которая не инцидентна -никакому ребру графа -  т.е. не лежит
на пути никакого ребра, не соединена с графом ниаким образом.

*** Изолированная вершина

Это вершина, инцидентная одной или нескольким петлям - т.е. через нее
проходят одна или несколько петель.

*** Смежные вершины

Это вершины, которые содеиняет хотя бы одно ребро.

*** Связанные вершины

В неорентированном графе вершины считаются связынми в том случае, если
есть возможность добаться из одной в другую, при этом неважно, делается
это через ребро, петлю, путь или маршрут. Если мы можем добраться изв
ершины x в вершину y, то можем и наоборот.

В оринетрованном графе все то же самое, только учитывается направление:
вершины считаются связными, если есть способ добраться и из x в y и из y
в x.

*** Обхват графа

Это длина минимального цикла в графе. Если циклов в графе нет, то обхват
= бесконечности. Если в графе минимальных обхват = 4, то такой граф
называется свободным от треугольников.

** Виды графов

*** Простой граф

Это граф, вершины которого соединены тмаксимум 1 ребром друг с другом,
некоторые вершины могут быть не соединенными ни с одной другой.
В таком графе не будет мультиребер или петель.

*** Ориентированный граф

Ориентированный граф - это направленный граф, т.е. когда от вершины к
вершине можно двигаться только в каком-то одном направлении. Например,
бинарное дерево - это направленный ациклический граф.

В ориентированном графе ращличают входящую и исходящую степень вершин.
Ориентированный граф называется простым, если он не имеет петель и ребер
с одинаковой упорядоченной парой вершин - т.е. он не должен иметь петельи
кратнх ребер, направление у которых было бы в одну сторону.

Т.е. если в графе есть вершина 2 и 3, и из вершины 2 идет два ребра в
вершину 3, то граф уже не простой. А еслиу нас все те же вершины, но одно
ребро идет из вершины 2 в 3, а другое идет из 3 в 2, то граф уже
простой.

**** Понятие смежных вершин в ориентированных графах
Есть две вершины: x y. Мы говорим, что вершина y является смежной с
вершиной x в том случае, если есть ребро, исходящее из вершины x в
вершину y.

Т.е x -> y - значит, вершина y смежная вершине x. Но при этом вершина x
не будет смежной для вершины y (!).

*** Неориентированный граф

Неоринетированный граф - это граф, по которому можно
ходить в любом направлении. Поэтому степень у вершины будет одна.

**** Понятие смежных вершин в неориентированных графах.

Две вершины. Они являются смежными друг для друга, если соединены
ребром.

*** Смешанный граф

Есть 3 вида ребер: дуги, петли и звенья. Смешаный граф - это граф, в
котором есть хотя бы 2 из 3 видов ребер.

*** Мультиграф

Это граф, содержащий кратные ребра, но не содержащий петель.

*** Полный граф

Граф называют полным, если он содержит в себе все возможные для
определенного типа графа ребра при неизвенном количестве вершин. Т.е. в
графе максимальное кол-во возможныхдля него ребер.

*** Двудольный граф

Двудольный граф или биграф - это граф, множество вершин которого можно
разбить на  две части (два подмножества) таким образом , что ребра графа
могут соединять только вершину из позмножества А и вершину из
подмножества В, но ни в коем случае не соединяет вершины из одного
подмножества.


Полный двудольный граф - это граф, где каждая вершина из множества А
соединены со всеми вершинами из множества В и наоборот. Обозначается как
Кmn, где m - это кол-во вершин в множестве А, а n - кол-во вершин в
множестве В.

У него есть свойство: если есть цикл, в котором я из какой-то вершины в
множестве А пройду n шагов и окажусь в этой вершине, то кол-во шагов
всегда будет четным. Это значит, что в двудольном графе будут
отсутствовать циклы нечетной длины. И наоборот, любой граф, в котором
отсутствуют циклы нечетной длины будет считаться двудольным графом.

**** Задача

Какое максимальное число ребер может быть в простом двудольном
неориентированном графе на 11 вершинах?

Итак, мы знаем, что у нас двудольный граф, в котором нет мультиребер и
петель. Тогда, чтоб посчитать макисмальное кол-во ребер в нем, надо
сделать этот граф полным - когда каждая из вершин блока А связана с
каждой из вершин блока В.

Будем считать, что в блоке А у нас 5 вершин, в блоке В - 6 вершин.

Получается, что в каждую из 6 вершин у нас идет по 5 путей. Итого 6 * 5
= 30.

*** Звезда

Это полный двудольный граф, у которого в обном из множества только 1
вершина. Поэтому получается, что она как бы центр, а от нее исходят
"лучики" в во все вершины другого множества. Поъоже на звезду.

*** Эйлеров граф

Эйлеровым графом называется граф, в котором можно обойти все
вершины и при этом пройти одно ребро только один раз. В нём каждая
вершина должна иметь только чётное число рёбер.

*** Регулярный граф

Это граф, все вершины которого имеют одинаковую степень - т.е. из каждой
вершины исходит одинаковое кол-во ребер.

*** Гамильтонов граф

Гамильтонов граф - это такой граф, в котором можно обойти все вершины и
каждая вершина при обходе повторяется лишь один раз. Отличие от
эйлерового в том, что в эйлеровом графе каждая вершина должна иметь
четное кол-во ребер.

*** Связный граф.

См отношение связности и отношение эквивалентности.

Это граф, который состоит только из одного класса эквивалетности (одного
блока связности) - т.е. все вершины в графе так или иначе связаны друг с
другом, возможно не напрямую, но мы можем попасть из одной вершины в
другую,даже если придется обойти для этого весь граф.

*** Сильно связный ориентированный граф

Это ориентированный граф, который состояит из одного класса
эквивалентности, и при этом все вершины связаны друг с другом
(см. определение связности вершин для ориентированного графа).

*** Слабо связный ориентированный граф

Представим себе сильно связынй ориентированный граф. Теперь превратим все
дуги в ребра - т.е. уберем направление в графе и сделаем его
неориентированным. Если он оказался связным - т.е. состоит из 1
компоненты связности, то его исходный ориентированный граф может
называться слабо связным.

** Задачи на связность в графе
*** Задача 1

Пусть G есть граф, построенный на вершинах 1,2,…,15 в котором вершины i и
j смежны тогда и только тогда, когда их наибольший общий делитель больше
единицы.
Сколько компонент связности имеет такой граф?

Есть 15 вершин, от 1 до 15. Компонента связности - это вершины, связанные
между собой в единый блок (см. отношения связности). Смежные вершины -
это вершины, которые соединяет хотя бы 1 ребро.

Мы знаем, что вершины смежны, если их НОД > 1.

Считаем смежные вершины:
2 и 4 (НОД = 2)
4 и 8 (НОД = 4)
2 и 6 (НОД = 2)
6 и 9 (НОД = 3)
5 и 15 (НОД = 5)
5 и 10 (НОД = 5)
7 и 14 (НОД = 7)
2 и 14 (НОД = 2)
10 и 14 (НОД = 2)
6 И 12 (НОД = 6)
9 И 12 (НОД = 3)
8 и 10 (НОД = 2)

Получается, что у нас "не у дел" оказываются вершины 1, 11 и 13, они вообще
не могут быть смежными ни с одной вершиной или друг с другом, поскольку
НОД для них и любого другой вершины из графа = 1.

Считаем компоненты связности.

Благодаря аксиоме транзитивности мы знаем, что если x связан с y, а y
связан с z, то x связан с z.

1, 11 и 13 - это три несвязанные ни с чем вершины.  Их можно считатт
тремя отдельным компонентами связности - каждая вершина как бы связана
сама с собой.

А остальные, описанные выше - это еще одна компонента
связности. Например, 2 и 7 не смежны между собой, но тем не менее если 2
и 14 смежные, а 7 и 14 тоже смежные, то и 2 и 7 связны.

Поэтому получается 4 компоненты связности.

*** Задача 2

Какое максимальное количество ребер может быть в простом слабо связном
ориентированном графе на 10 вершинах, не являющимся сильно связным?

Итак, простой граф - это значит, что у нас в графе нет петель и
мультиребер, а раз он слабо связный и при этом сильно связным не
является, то просто представляем простой неориентированный граф из 10
вершин. И считаем, сколько в нем ребер возможно максимально, чтоб он все
еще остался простым.


** Матрица инцидентности

Одна из форм представления графа, в которой указываются связи между
инцидентными элементами графа: ребро (дуга) и вершина. Столбцы матрицы
соответствуют ребрам, строки — вершинам. Ненулевое значение в ячейке
матрицы указывает связь между вершиной и ребром (их инцидентность).

Значения в матрице инциентности всегда будут 0, 1 или -1. Где 0 - это
отсутствие инцидентности, 1 - это значит, что данная вершина является
началом ребра, а -1 означает, что вершина является концом ребра.

** Матрица смежности

Это матрица размером N x N, где N - это кол-во вершин в графе. В матрице
есть строки и слобцы. Строки обозначим как i, а столбцы как j. Элемент,
находящийся на пересечении строки и стобца обозначает кол-во ребер,
исходщих из вершины i и входящих в вершину j.

Т.е. предаставим себе, что у нас есть 4 вершины в графе. Это значит, что
у нас будет матрица 4 на 4. Где i - это какая-то из строк матрицы (их будет 4) - а
j - это какой-то из столбцов матрицы.
Элемент, который будет находиться на пересечении j1 и i1 будет обозначаль
кол-во ребер, исходящих из вершины i в вершину j.

В случае затыка смотри сюда
https://www.youtube.com/watch?v=TLV2akXrAXE

*** Матрица смежности для простого неориентированного графа

Будет состоять только из нулей и единиц - потому что у нас две вершины
могут быть соединены максимум 1 ребром.

** Первая теорема теории графов или лемма о рукопожатиях

Сумма степеней вершин графа равняется кол-ву ребер графа, умноженному
на 2. Работает только для НЕ ориентированных графов.

Доказательство:
Любое ребро дает вклад равный 2 в суммарную степень вершин графа. Поэтому
и получается, что сумма степеней вершин графа = удвоенному кол-во ребер
графа.

Из этого следует, что кол-во вершин с нечетной степенью всегда
четно. В другом случае граф просто не существует.

Эта теорема известна как лемма о рукопожатиях, согласно которой кол-во
людей, которые нечетное кол-во раз пожали руки другим людям, обязательно
будет четным.

** Задача

В группе имеется девять студентов. Каждый из них послал по сообщению
каким-то трем другим студентам. Возможна ли ситуация, при которой каждый
студент получит сообщения от тех же трех студентов, кому он послал свои сообщения?

Для ответа используйте первую теорему теории графов.

*** Решение

Представляем себе граф, в котором 9 вершин - 9 студентов. Если каждый
студент послал по 3 сообщения, то получается, что у каждой вершины будет
минимум 3 ребра, т.е. миимум степень вершины = 3. Вопрос звучит как
"возможно ли, что студент получит сообщения от тех же 3х студентов, кому
он послал сообщения" поэтому мы будем считать, что граф у нас не
направленный - по одному и тому же ребру (связи) оба студента могут
обмениваться сообщениями.

Поэтому считаем, что степень каждой вершины = 3. Это значит, что
суммарная степень графа у нас 3 * 9 = 27. Раз сумма степеней всех вершин
= 27, то по первой теореме у нас должно быть число ребер, умножив которое
на 2 мы получим 27. Но такого целого числа нет.

** Маршруты, пути, связность

*** Маршрут

Муршрут в графе - это чередующася последовательность вершин и ребер, где
ребро Ei соединяет вершину Xi и Xi-1. Концевые вершины маршрута - это
вершина, с которой маршрут начинается и на которой заканчивется. Все
остальные вершины и ребра считаются внутренними. Ребра могут
повторяться.

*** Путь

Это маршрут, в котором все ребра различны.

*** Простой путь (path)

Это маршрут, в котором все ребра и вершины различны.

*** Замкнутый маршрут

Это маршрут, в котором начальная и конечная вершины совпадают.

*** Замкнутый путь

Это путь, в котором начальные и конечные вершины совпадают, только все
ребра в пути различны (в отличие от замкнутого маршрута).

*** Простой Цикл

Это замкнутый маршрут, в котором все ребра и вершины различны.
В любом простом графе длина цикла >= 3.


** Отношение эквивалентности на множестве X

Это такое бинарное отношение, которое стоит на 3х "китах"

- рефлексивность - т.е. каждый элемент в множестве эквивалентен сам себе
- симметричность - если x эквивалентен y, то и y эквивалентен x
- транзитивность - если x эквивалентен y, а y эквивелентен z, то
  следовательно, x эквивалентен z.

Любое отношение эквивалентности на множестве разбивает это множество на
классы эквивалентности или блоки.

Блоки - это такие непустые подмножества X, которые не пересекаются между
собой и все сместе дают множество X. Строятся они так: берем какой-то
элемент в множестве и ищем эквивалентные ему - объединяем в блок. Потом
берем оставшиеся элементы и выбираем еще какой-то и поступаем так же и
т.д.

Например, есть множество животных в зоопарке. Сначала берем какую-то
обезъяну и ищем еще обезъян в множестве - всех сажаем в клетку. Потом
берем зебру и ищем всех зебр - они тоже отправляются в свой вольер. И
т.д. Все эти множества не пересекаются и при этом дают в общем все
множество зверья в зоопарке.

** Отношение связности

Это очень похоже на отношение эквивалентности на множестве, только речь о
графе. Принципы те же:

- рефлексивность - каждая вершина связана с сама собой
- симметричность - если вершина 1 связана с вершиной 2, то и вершина 2
  связана с вершиной 1
- транзитивность - если вершина 1 связана с вершиной 2, а 2 связана с 3,
  то 1 связана с 3.

Отншение связаности так же разбивает вершины на блоки. В каждом блоке
содержатся вершины, которые связаны друг с другом.

В неориентированном графе компоненты связности не могут иметь общих
ребер - иначе это превратится в одну компоненту связности.

В ориентированном графе разные компоненты связности могут иметь общие
ребра, но направлены они будут только в 1 сторону, например, от
компоненты А к компоненте В - в противном случае получится опять одна
компонента связности. И в таких графах не будет ориентированныхциклов -
иначе это все опять превратится в одну компоненту связности.

*** Задача

Выберите правильные утверждения, связанные с графом компонент сильной
связности.

- Если граф компонент сильной связности слабо связен, то в нем обязательно
  найдется вершина, в которую можно попасть из любой другой вершины.
- В графе компонент сильной связности столько же компонент сильной
связности, сколько и в исходном графе.
- Граф компонент сильной связности всегда слабо связен.
- Граф компонент сильной связности может быть сильно связным.
- По данному графу компонент сильной связности можно определить число
вершин в исходном графе.

** Деревья

Это простые графы, в котором отсутствуют циклы.
Высота дерева - это максимальный уровень дерева.
Свойства дерева:
- лист - это любая вершина, степень которой = 1
- в любом дереве есть как минимум 2 листа (если n >= 2)
- у любого дерева, построенного на n вершинах есть n-1 ребро
- если у нас есть простой связный граф, у которого n вершин и n-1 ребер,
  то такой граф обязан быть деревом

Следовательно, в любом графе есть остовное дерево: если взять граф с
циклами и последовательно удалеть ребра в цикле до тех пор, пока не
получим дерево, то это дерево и будет отстовным поддеревом исходного
графа.

- любое ребро в дереве является мостом
- любые 2 вершины в дереве соединены единственным путем

*** Алгоритм поиска в глубину

Это алгоритм позволяет в любом связном простом графе найти его дерево.
- берем первую вершину
- находим первую смежную с ней, которая еще не включена в наше искомое
  дерево
- занимаем ее, ищем ближайшую вершину, смежную с ней и т.д.

Так до тех пор, пока не останется смежных вершин у какой-то вершины на
текущем шаге рекурсии. Тогда возвращаемся на предыдущий шаг рекурсии, и
ищем еще одну незанятую вершину и обходим это поддерево - при этом
вершины, которые мы обошли (и зашли в тупик) никуда из искомого дерева не
деваются. Наша цель - просто обойти весь граф таким образом, чтоб
избавиться от циклов - т.е. ни одна смежная вершина не должна быть уже
частью дерева, тогда мы можем включить ее в дерево.

Алгоритм заканчивает работу, когда все необойденные вершины кончаются.

*** Алгоритм поиска в ширину

Этот алгоритм строит такое остовное дерево из исходного графа, где
расстояние между корневой вершиной и всеми другими вершинами не больше,
чем расстояние между этими же вершинами в исходном графе.

В этом его отличие от поиска в грубину.


*** Задача
Лес — это граф, каждая компонента связности которого является деревом.

Рассмотрим лес, построенный на 41 вершине и имеющий семь компонент
связности. Сколько ребер в таком графе?

Итак, у нас есть семь подграфов. Если у нас 41 вершина, которую надо
распределит по 7 деревьям, то получится, что в 6 деревях будет по 6
вершин, а в одном дереве - 5.
Считаем (* (6 - 1) 6) + (5 - 1) = 34

*** Задача
Дано дерево на семи вершинах. Известно, что в этом дереве по меньшей мере
три вершины имеют степень 1, и как минимум две вершины имеют
степень 3. Найдите последовательность степеней вершин этого графа.

Если нарисовать, то становится очевидно, что последовательность
3 3 2 1 1 1 1

*** TODO Задача
[TODO:gmm]
На лекции мы доказали, что любой граф на n вершинах, имеющий меньше чем
n-1 ребро, обязательно является несвязным. В случае, когда количество
ребер в графе больше или равно n-1, граф может быть как связным, так и
несвязным. Какое минимальное количество ребер должен иметь простой граф
на n вершинах, чтобы он гарантированно был связным?

В качестве ответа укажите необходимое количество ребер для графа,
построенного на 100 вершинах.

*** TODO Задача на поиск в глубину

[TODO:gmm]
Найти количество компонент связности неориентированного графа при помощи
поиска в глубину.

Формат входных данных:
На вход подаётся описание графа. В первой строке указаны два натуральных
числа, разделенные пробелом: число вершин v≤1000  и число рёбер e≤1000.
В следующих e строках содержатся описания рёбер.
Каждое ребро задаётся разделённой пробелом парой номеров вершин, которые
это ребро соединяет. Считается, что вершины графа пронумерованы числами от 1 до v.

Формат выходных данных:

Одно число — количество компонент связности графа.

Сначала просто реализуем поиск в глубину на каком-то графе.
Сделаем это на 3х языках: с++, go и лисп. Начнем с лиспа, как с наиболее
известного языка.

Самое главное, нужно знать, не образует ли дерево, полученное в
результате поиска, цикл.

Сделать это просто: если две вершины нового ребра уже связаны друг с
другом каким-то путем в графе, то добавление этого ребра создаст цикл.

Предположим, есть список ребер (0 1) (1 3) (3 4) (4 2).  Мы хотим
добавить ребро (4 1). Чтоб определить, создаст ли это ребро цикл, нужно
определить, являются ли вершины 4 и 1 связными уже - т.е. есть ли между
ними какой-то путь.

Берем вершину 4. В списке ребер ищем все инцидентные ей ребра - они
должны выключать эту вершину. Если таковые есть, вытаскиваем вершины из
них и ищем инцидентные им ребра и т.д до тех пор, пока не найдем ребро,
инцидентное 1 или список не кончится.

#+BEGIN_SRC lisp
  ;; ищет все ребра, инцидентные заданной вершине
  (defun find-incident-edges (top list-of-edges)
    (if ( null list-of-edges)
        '()
        (if (member top (car list-of-edges))
            (cons  (car list-of-edges)
                   (find-incident-edges top (cdr list-of-edges)))
            (find-incident-edges top (cdr list-of-edges)))))

  ;; (find-incident-edges 4 '((1 2) (3 4) (4 5) (5 6) (1 4)))

  ;; возвращает вершину в ребре, отличную от заданной, при условии, что эта вершина
  ;; не числится как "исследованная"
  (defun get-second-top (top edge list-of-researched-tops)
    (if ( = top (car edge))
        (if (member (cadr edge) list-of-researched-tops)
            nil
            (cadr edge))
        (if (member (car edge) list-of-researched-tops)
            nil
            (car edge))))

  ;; ищет первую неисследованную вершину, среди концевых ребер вершины, инцидентных
  ;; заданной
  (defun get-unserched-top (top list-of-researched-tops list-of-incident-edges)
    (if (null list-of-incident-edges)
        nil
        (let ((unserched-top (get-second-top top (car list-of-incident-edges)
                                             list-of-researched-tops)))
          (if (null unserched-top)
              (get-unserched-top top list-of-researched-tops
                                 (cdr list-of-incident-edges))
              unserched-top))))

  ;; определяет, есть ли какой-то путь между двумя заданными вершинами
  ;; принимает 2 вершины и список ребер, возвращает булево значение
  (defun have-path? (top-begin top-end list-of-edges)
    (have-path-rec top-begin top-end list-of-edges '()))

  (defun have-path-rec (top-begin top-end list-of-edges list-of-researched-tops)
    (if (null list-of-edges)
        nil
        (let ((list-of-incident-edges
               (find-incident-edges top-begin list-of-edges)))
          (if (find-incident-edges top-end list-of-incident-edges)
              t
              (do ((i (length list-of-incident-edges) (decf i)))
                  ((= i 0) nil)
                (let ((new-top (get-unserched-top
                                top-begin list-of-researched-tops
                                list-of-incident-edges)))
                  (if (null new-top)
                      nil
                      (if (have-path-rec new-top top-end list-of-edges
                                      (cons top-begin
                                            list-of-researched-tops))
                          (return-from have-path-rec t)
                          (setf list-of-incident-edges
                                (cdr list-of-incident-edges))))))))))



  (have-path? 4 3 '((1 2) (3 4) (4 5) (5 6) (1 4)))
  (have-path? 4 6 '((1 2) (3 4) (4 5) (5 6) (1 4)))
  (have-path? 6 3 '((1 2) (3 4) (4 5) (5 6) (1 4)))
  (have-path? 0 3 '((1 2) (3 4) (4 5) (5 6) (1 4)))
  (have-path? 4 7 '((1 2) (3 4) (4 5) (5 6) (1 4) (2 7)))
  (have-path? 1 8 '((1 2) (3 4) (4 5) (5 6) (1 4) (2 7) (9 8)))
#+END_SRC

Мы предполагаем, что граф будет задаваться как список ребер, где каждый
подсписок - это 2 концевые вершины ребра.
Пройденные ребра надо запоминать - это и будет дерево, образованное от
поиска в глубину. Прежде чем добавить новое ребро, проверяем, не создаст
ли это цикл. Если да, то не добавляем ребро в список ребер.

Мы предполагаем, что граф размеченный - т.е. у вершин есть некоторый
порядок. Предположим, есть вершина 2 и ей инцидентны вершины 4
и 7. Сначала пойдем по ребру, соединяющему 2 и 4, и только когда обойдем
это поддерево, то пойдем по ребру (2 7), если в этом будет
необходимость.

На каждом шаге рекурсии:
- берем вершину
- ищем все инцидентные ей
- выбираем ту, что соединяет текущую вершину и наиболее близкую к ней по
  порядку
- заносим ребро, соединяющее их, в список сохраненных ребер
- идем к новой вершине и проверяем все вершины, инцидентные ей и т.д.
- повторяем до тех пор, пока не уперлись в тупик - нет инцидентных вершин
  или они уже все обойдены.

#+BEGIN_SRC lisp
  (defun get-other-top (top edge)
    (if (= top (car edge))
        (cadr edge)
        (car edge)))

  ;; ищет "ближайшее" по порядку вершин ребро
  (defun find-nearest-edge (top edge list-of-incident-edges)
    (if (null list-of-incident-edges)
        edge
        (if (> (get-other-top top edge)
               (get-other-top top (car list-of-incident-edges)))
            (find-nearest-edge top (car list-of-incident-edges)
                               (cdr list-of-incident-edges))
            (find-nearest-edge top edge
                               (cdr list-of-incident-edges)))))


  ;; ищет следующее доступное для прохода ребро
  (defun find-next-edge (top list-of-incident-edges path-in-depth)
    (if (null list-of-incident-edges)
        nil
        (let ((nearest-edge (find-nearest-edge top
                                               (car list-of-incident-edges)
                                               (cdr list-of-incident-edges))))
          (if (have-path? (car nearest-edge) (cadr nearest-edge) path-in-depth)
              (find-next-edge top
                              (remove nearest-edge list-of-incident-edges :test #'equal)
                              path-in-depth)
              nearest-edge))))


  ;; (find-next-edge 4 '((3 4) (1 4) (4 5)) '())
  ;; (find-next-edge 4 '((3 4) (1 4) (4 5)) '((4 3) (3 1)))
  ;; (find-next-edge 4 '((3 4) (1 4)) '((4 3) (3 1)))

  (defun search-in-depth-rec (top list-of-edges path-in-depth)
    (if (null list-of-edges)
        path-in-depth
        (let ((list-of-incident-edges
               (find-incident-edges top list-of-edges)))
          (do ((i (length list-of-incident-edges) (decf i)))
              ((= i 0) path-in-depth)
            (let ((edge (find-next-edge top list-of-incident-edges path-in-depth)))
              (if (null edge)
                  (return path-in-depth)
                  (progn
                    (setf list-of-incident-edges
                          (remove edge list-of-incident-edges :test #'equal)
                          path-in-depth (cons edge path-in-depth)
                          list-of-edges (remove edge list-of-edges :test #'equal))
                    (let ((new-path (search-in-depth-rec (get-other-top top edge)
                                                         list-of-edges path-in-depth)))
                      (setf path-in-depth new-path)))))))))

  (defparameter *test-graph* '((0 3) (3 1) (1 10) (10 0) (1 2) (2 8) (8 12)
                               (12 5) (6 11) (5 11) (4 6) (7 9) (4 7) (4 8)))

  (defparameter *test-graph2* '((1 2) (1 4) (2 7) (2 4) (4 3) (4 5) (5 6)))

  (search-in-depth-rec 1 *test-graph2* '())
  (search-in-depth-rec 0 *test-graph* '())
#+END_SRC


*** TODO Задача на поиск в ширину

[TODO:gmm]
На вход программе подаётся описание простого связного графа. Первая
строка содержит два числа: число вершин V≤10000  и число рёбер E≤30000.
Следующие E строк содержат номера пар вершин, соединенных рёбрами.
Вершины имеют номера от 0  до  V−1. Выведите список из V чисел — расстояний от
вершины 0 до соответствующих вершин графа.


#+BEGIN_SRC lisp
  (defun
#+END_SRC


** Топологиеская сортировка графа

Это расположение вершин графа в некотором линейном
порядке. Действует это только для ~ациклических~ графов.

Топологическая сортировка ориентированного графа считается
правильной, если все ребра после сортировки направлены слева направо.

** Раскраска графов

*** Правильная раскраска графа

Это такая раскраска его вершин, при которой любые две его смежные вершины
окрашены в разные цвета.

** Подграфы

Граф А, является является подграфом В, если:

- множество вершин графа А является подмножеством вершин графа В
- аналогичное условие для ребер
- если какое-то ребро соединяет две какие-то вершины в графе А, то такое
  же ребро должно соединять эти же вершины в графе В

Последнее условие обязательное и чуть ли не самое главное.

Любой граф, который получается путем удаления одного или нескольких
ребер/вершин будет подграфом этого графа.

На простом связном графе из m ребер можем построить 2^m остовных графов:
используем простое правило перестановки из комбинаторики и учитываем, что
у нас ребро либо есть/либо нет. Т.е. просто комбинируем кол-во исходов (а
их всего два) m раз, потому что ребер m.

*** Остовный подграф

Это подграф, полученный в результате удаления только ребер в графе.

*** Подграф, индуцированный подмножеством вершин

Это подграф, полученный в результате вершин и ребер, с ними связанных.

*** К-фактор

Если в графе есть К-регулярный (т.е. степени у всех вершин равны К)
подграф, то такой подграф называется К-фактором.

** Мост

Ребро в каком-то графе называется мостом в случае, если в результате его
удаления кол-во компонент связности в графе увеличивается на 1.

Так жеребро может являеться мостом только в том случае, если не
принадлежит ни к одному из циклов в графе.

** Точка сочленения

Это такая вершина, в результате удаления которой кол-во компонент
связности в графе увеличивается минимум на 1.

По-другому определение звучит так: вершина А является точкой сочленения
между вершинами В и D только в случае, если любой путь от D до В и
обратно проходит через вершину А.

** Операции над графами
** Как подсчтать кол-во всех простых графов на n вершинах

Смотри вот это.
Ниче не понятно
https://stepik.org/lesson/10897/step/2?unit=2335

Формула для неориентированных графов такая: 2 ^( (n(n - 1)) / 2)
Где n - это мощность множетсва V.
Что такое можность множества?

Для неориентированных графов получится 2 ^ (n(n - 1)), не надо степень
делить на 2, потому что ребер получится в 2 раза больше.

** Изоморфизм графов

*** Изоморфизм простых графов

Графы считаются изоморфными друг другу, если отображение вершин множетсва
является взаимнооднозначным и сохраняет отношения смежности между
вершинами.

Взаимно однозначное отображение - это биекция. Т.е. это когда отображение
инъективно и сюръективно. То есть разные точки из
множества X переходят в ~разные~ точки из множетсва Y - свойство
инъекции, но при этом все точки Y соответсвутю каким-то точкам из X,
т.е. все точки из Y "заняты".

Т.е. это означает что у каждой вершины из графа А есть соответствующая ей
вершина из графа В, кол-во вершин в графах одинаково и у каждой вершины
свое соответствие.

А сохранение отношения смежности между вершинами означает, что если две
какие-то вершины соединены ребром в графе А, то их ~отображения~ в графе
В тоже должны быть соединены ребром.

Допустим, есть два графа, А и В. Выглядят они вот так:
1--2--3  и 1--3--2

Делаем биекцию, получаем что:
1 отображается в 1
2 отображается в 3
3 отображается в 2

Отображение очевидно биективно.
Теперь проверяем, что отношение смежности сохраняется.
У нас между 1 и 2 в графе А есть ребро. Мы знаем, что 1 отображается в 1,
а 2 отображается в 3. И видим, что в графе В вершины 1 и 3 соединены
ребром. Аналогично проверяем для ребра между 2 и 3 в графе А.

Таким образом получается, что графы А и В изоморфны друг другу.

Изоморфизм позволяет разбивать графы "по группам" - т.е. объединять графы
в группы. Эти группы назваются классами эквивалентности. Этот класс
эквивалентности называется "непомеченным графом" - т.е. мы отбрасываем
азывания ребер и вершин и оставляем "суть". Таким образом мы видим, что
графы одинаковые - та же если выглядят немного по-разному.
А вот графы, которые входят в класс эквивалентности, называются
помеченными графами - у них помечены вершины и ребра.

*** Алгоритм проверки графов на изоморфность

- у двух графов должно быть одинаковое кол-во вершин
- у этих вершин должны совпадать степени: если в графе А есть 3 вершина
  со степенью 5, то и в графе В должно быть столько же вершин с такой же
  степенью

Если эти два критерия не помогают, то есть тупой способ:

- размечаем вершины у обоих графов одним и тем же множеством от 1 до n
- фиксируем пометки вершин одного графа
- у второго графа совершаем все возможные перестановки названий вершин -
  n! - и сравниваем матрицу смежности на каждом шаге у зафиксированного и
  меняющегося графов

Если хоть на одном шаге матрицы (списки) смежности совпали - шрафы
изоморфны.

Способ крайне неэффективен, поэтому есть способы н=для проверки на
изоморфность отдельных классов графов. Но общего решения для всех нет.

*** Изоморфизм для неориентированных мультиграфов

** Автоморфизм графа

Это способ перестановки вершин графа, при которой граф переходит в сам в
себя.

Есть графы 1--2--3 и 3--2--1
Если посмотреть на отношения смежности, то видно, что хотя вершины у
графов размечены в разном порядке, но отношения смежности между ними
соверешнно одинаковые: 1 смежно с 2, 2 смежно с 3. Таким образом мы
видим, что графы одинаковые, т.е. граф перешел сам в себя.

*** Свйоства автоморфизма графов

- тождественная перестановка графа - это автоморфизм
- если какая-то перестановка является автоморфизмом графа, то обратная
  для нее перестановка тоже будет автоморфизмом графа
- если есть пара перестановок, которая является автоморфизмами графа, то
  их композиция так же будет являться автоморфизмом графа

** Как получить все способы разметки непомеченного графа

Есть граф В. Для нахоления способов его разметки мы считаем n! / (|Aut
В1|), где n - кол-во вершин в графе, а |Aut B1| - это порядок группы
автоморфизма, полученных от графа В1. А В1 - это произвольно размеченный
граф В. Порядок группы означает еще мощность, т.е. сколько в ней
элементов. Т.е. мы тупо делим n! на кол-во автоморфизмов, полученных от
графа В1

Если просто посчитать кол-во сопосбов как n!, то получится, что мы не
учитываем автоморфизмы, т.е. не учитываем способы, при которых граф
переходит сам в себя.

*** TODO Задача
Подсчитать количество автоморфизмов полного графа Kn.

** Эйлеров цикл

Это цикл, в котором мы проходим по каждому ребру только 1 раз, чтоб
обойти весь граф.

Для того, чтоб эйлеров цикл существовал, нужно 2 условия, которые
необходимы и достаточны:
- степени вершин должны быть четными
- граф должен быть связным

Может быть ситуация, при которой 2 описанных выше условия выполнены, мы
обошли почти все вершины и оказались в тупике - все ребра, инцидентные
этой вершине уже пройдены. Это не значит, что в графе нет эйлерова цикла:
в этом случае просто ищем вершину, которая являюется частью уже
найденного цикла и при этом имеет инцидентные ей необойденные
рербра. Тогда берем эту вершину и обходим граф от нее дальше.
В эйлеровом графе такая вершина обязательно найдется.

*** TODO Задача

Пусть в связном графе G ровно 2k вершин имеют нечетную
степень. Доказать, что в этом графе можно построить k таких путей,
что каждое ребро графа G будет принадлежать только одному из этих
путей.

*** Задача

Рассмотрим связный простой регулярный граф G , степень любой вершины
которого равна четырем. Доказать, что ребра этого графа всегда можно
покрасить в два цвета (красный и синий) так, чтобы любая вершина была
инцидентна ровно двум синим и ровно двум красным ребрам.

Если у каждой вершины есть 4 ребра, которые с ней связаны, значит, у нас
будет четное количество ребер. Раз у нас четное вол-во ребер и мы красим
их в 2 цвета, то очевидно, что 50% ребер будут покрашены в один цвет и
50% -  в другой. Таким образом очевидно, что мы всегда можем покрасить
ребра так, чтоб 2 ребра каждой вершины были синими и 2 ребра - красными.

*** TODO Задача

Найдите эйлеров цикл в графе.

Формат входных данных:
В первой строке указаны два числа разделенных пробелом: v (число
вершин) и e (число ребер). В следующих e строках указаны пары вершин,
соединенных ребром. Выполняются ограничения: 2≤v≤1000,0≤e≤1000.

Формат выходных данных:
Одно слово: NONE, если в графе нет эйлерова цикла, или список вершин в
порядке обхода эйлерова цикла, если он есть.

** Гамильтонов путь

Это такой путь, который соединяет вершину А и вершину В, проходя через
все остальные вершины графа.

Достаточные условия для существования гамильтонова пути:
- n > 2
- если сумма степеней двух несмежных между собой вершин >= n - 1, где n -
  кол-во вершин в графе - то гамильтонов путь точно существует. Это
  известно как теорема Оре.
- если степень любой вершины графа >=(n - 1)/ 2, то гамильтонов путь
  существует

** Гамильтонов цикл

Это цикл, который обходит каждую вершину в графе только 1 раз.

Необходимые условия:
- граф должен быть связным
- если в графе есть хотя бы 1 лист, то в таком графе гарантированно НЕ
  будет гамильнова цикла
- если удалить n вершин в графе (вместе с инцидентными им ребрами), то
  граф распадается на количество компонент связности, меньшее или равное
  кол-ву удаленных вершин в графе

Достаточные условия:
- в полном графе гамильтонов цикл существует (причем их несколько)
- если между вершинами А и В проходит гамильтонов путь, а эти вершины
  смежные, то в графе есть гамильтонов цикл
- если между указанными вершиными есть гамильтонов путь, но они не
  являются межными, то складываем степени этих вершин: если их сумма >=
  n - где n кол-во вершин - то гамильтонов путь в таком графе есть
- если у любоей вершины степень >= n/2, то гамильтонов цикл существует
- если
