
* Интро

Разбор красно-черного дерева.

* Описание дерева
Двоичное дерево поиска, в котором баланс осуществляется на основе "цвета"
узла дерева, который принимает только два значения: "красный" (англ. red)
и "чёрный"

Свойства:
- Каждый узел промаркирован красным или чёрным цветом (помимо того, что
  содержат значения)
- Корень и конечные узлы (листья) дерева — чёрные
- У черных узлов могут быть дети как черные, так и красные
- У красных узлов ети могут быть только красные
- Все простые пути из любого узла x до листьев содержат одинаковое(!)
  количество чёрных узлов

* Алгоритм вставки в красно-черное дерево

Ищем лист для вставки как при обычном бинарном дереве.  Помним, что во
всех листах у нас nil и они окрашены в черный цвет.
Находим лист, вписываем в него новый элемент. Окрашиваем полученный узел
в красный (!) - потому что теперь этот лист становится узлом, у которого
должны быть обязательно черные потомки.
Дальше смотрим, если родительский узел нашего свеженького узла - черный,
то все отлично, дерево перебалансировать не надо. Но вот если он
красный - у нас накладка, потому что у красного узла родитель может быть
только черным. Тогда дерево придется перебалансировать - т.е. перекрасить
узлы так, чтоб соблюсти все свойства.

Так возникает вопрос: зачем нам переколбашивать дерево, если можно просто
окрасить свежий узел так, чтоб его цвет не противоречил правилам вместо
того, чтоб окрашивать его строго в красный?

Ответ: красно-черное дерево обязательно сбалансированное - поэтому
вставка и уаление узла происходит за O(logN). У наслюбой путь от узла до
листа должен содержать одинаковое количество черных узлов - так и
достигается балансировка. Если же окрашивать свежие узлы не строго в
красный, а, например, в зависимости от цвета родителя, то у нас
получится, что какой-то путь содержит больше черных узлов, чем
другие. Дерево расбалансирутеся и весь смысл в нем пропадает.


Возвращаемся к вставке.
Если родительский узел черный, а наш новый узел красный - все
отлично. Если же родительский узел красный, то:

- смотрим на "дядю" - узел, который находится на одном и том же уровне с
  "папой" и у которого с ним общий "дедушка". Если "дядя" тоже красный,
  то перекрашиваем папу и дядю в черный цвет и больше не паримся.

- дядя оказался черным.

Тогда геморрой, дерево придется вращать.
Папа станет дедушкой, свеженький потомок встанет на место папы. Дедушка
же встанет на место дяди. Дядя так и останется связанным с дедушкой, так
что подвинув дедушку, на уровень глубины вниз - на место дяди - вся ветка
дяди тоже сместится на уровнь ниже.

И при этом надо следить, чтоб все узлы по-прежнему были окрашены
правильно.
Если дедушка был черным, то папа, вставая на его место, должен
перекраситься в черный. Мы помним, что наш дядя тоже был черным, значит,
дедушку, который станет связывать дядю и папу, придется перекрашивать в
красный - потому что иначе у нас на одной ветке получится слишком много
черных узлов.

Для полного понимания смотрим сюда
https://habr.com/ru/company/otus/blog/472040/

* Вставка на лиспе
Согласно описанным выше правилам, закодиваем алгоритм вставки.
Каждый узел будет содержать значение, цвет и два
указателя на потомков и один - на предка.

По умолчанию все узлы черные.
#+NAME: r_b_node
#+BEGIN_SRC lisp :noweb yes
    (defstruct (node (:print-function (lambda (n s d)
                                        (print-tree s n d))))
      (elt nil)
      (color 'black)
      (parent nil) (l nil) (r nil))

#+END_SRC

Пишем процедуру для печати дерева - обычная печать не подойдет, поскольку
вызовет нескончаемую рекурсию из-за наличия поля "parent" в структуре.

#+NAME: print-r-b-tree
#+BEGIN_SRC lisp :noweb yes
  (defun print-space (n)
    (if (= n 0)
        t
        (progn
          (format t " ")
          (print-space (decf n)))))

  (defun print-node-values (stream string node)
    (if (null node)
        (format stream "NIL ~%")
        (format stream "#~A < ~A > ~%"
                string
                (node-elt node))))


  (defun print-child (stream string child level)
    (print-space  (expt level 2))
    (format stream "~A " string)
    (print-tree-rec stream child level))

  (defun print-node-color (stream string color level)
    (print-space  (expt level 2))
    (format stream "~A ~A ~%" string color))

  (defun print-parent-values (stream parent level)
    (print-space (expt level 2))
    (format stream ":PARENT ")
    (print-node-values stream "" parent))

  (defun print-tree-rec (stream tree level)
    (if (null tree)
        (print-node-values stream "" tree)
        (progn
          (print-node-values stream "NODE" tree)
          (print-node-color stream ":COLOR" (node-color tree) (+ 1 level))
          (print-parent-values stream (node-parent tree) (+ 1 level))
          (print-child stream ":LEFT" (node-l tree) (+ 1 level))
          (print-child stream ":RIGHT" (node-r tree) (+ 1 level))
          (format stream "~%" ))))

  (defun print-tree (stream tree d)
    (format stream "~%" )
      (print-tree-rec stream tree d))

  (print-tree t (make-node :elt 3) 1)
#+END_SRC

Реализуем суб-процедуры. Процедуры перекрашивания узла в черный и
красный цвета:

#+NAME: recolor_node
#+BEGIN_SRC lisp :noweb yes
  (defun recolor-red (node)
    (setf (node-color node) 'red))

  (defun recolor-black (node)
    (setf (node-color node) 'black))
#+END_SRC

Предкат, который будет определять цвет узла:

#+NAME: predicats
#+BEGIN_SRC lisp :noweb yes
  (defun red? (node)
    (equal (node-color node) 'red))

  ;; (defun black? (node)
  ;;   (if (null node)
  ;;       nil
  ;;       (equal (cdr (node-elt node)) 'b)))

  (defun black? (node)
    (equal (node-color node) 'black))

  (defun on-one-side? (grand-dad dad new-node)
    (if (null grand-dad)
        (or (equal (node-l dad) new-node)
            (equal (node-r dad) new-node))
        (or (and (equal (node-l grand-dad)
                        dad)
                 (equal (node-l dad)
                        new-node))
            (and (equal (node-r grand-dad)
                        dad)
                 (equal (node-r dad)
                        new-node)))))

  (defun leaf? (node)
    (if (null node)
        nil
        (and (black? node) (null (node-elt node)))))
#+END_SRC

Процедуры, возвращающие дядю, папу, дедушку, брата узла или его значение:
#+NAME: get_relatives
#+BEGIN_SRC lisp :noweb yes
  (defun get-dad (node)
    (node-parent node))

  (defun get-brother (node)
    (let ((dad (get-dad node)))
      (if (null dad)
          nil
          (let* ((left (node-l dad))
                 (elt (node-elt left)))
            (if (equal elt (node-elt node))
              (node-r dad)
              (node-l dad))))))

  (defun get-grand-dad (node)
    (node-parent (get-dad node)))

  (defun get-uncle (node)
    (let ((dad (get-dad node))
          (grand-dad (get-grand-dad node)))
      (if (equal (node-elt (node-l grand-dad))
                 (node-elt dad))
          (node-r grand-dad)
          (node-l grand-dad))))

#+END_SRC

Процедура добавляет два листа к узлу:

#+NAME: add_leafs
#+BEGIN_SRC lisp :noweb yes
  (defun add-leafs (node)
    (setf (node-l node) (make-node :parent node)
          (node-r node) (make-node :parent node))
    node)
#+END_SRC

Процедура, устанавливающая новые "родственные связи" между
узлами. Т.е. просто заменяет заданный потом у узла.
Принимает родительский узел, узел, который надо заменить, и узел, которым заменяем.

#+NAME: set_new_child
#+BEGIN_SRC lisp :noweb yes
  (defun set-new-child (parent-node old-child-node new-child-node)
    ;; (format t "set-new-child parent node: ")
    ;; (print-tree t parent-node 1)
    ;; (format t "set-new-child old node: ")
    ;; (print-tree t old-child-node 1)
    ;; (format t "set-new-child new node: ")
    ;; (print-tree t new-child-node 1)
    (if (equal (node-elt (node-l parent-node)) (node-elt old-child-node))
        (progn
          (format t "set left child ~%")
          (setf (node-parent new-child-node) parent-node
                (node-l parent-node) new-child-node)
          ;; (format t "new parent node: ")
          ;; (print-tree t parent-node 1)
          )
        (progn
          (format t "set right child ~%")
          (setf (node-parent new-child-node) parent-node
                (node-r parent-node) new-child-node))))
#+END_SRC

Теперь пишем процедуру, которая перекрасит папу и дядю вставляемого узла
в черный, если они оба красные. В этом случае, перекрасив их, мы без
проблем сможем вставить новый красный узел.

#+NAME: recolor_black_dad_and_uncle
#+BEGIN_SRC lisp :noweb yes
  (defun recolor-black-dad-and-uncle (node)
    (let* ((dad-node (get-dad node))
           (uncle-node (get-uncle node)))
      (recolor-black dad-node)
      (recolor-black uncle-node)))
#+END_SRC

Процедуру, вращающую поддерево, если:
- дядя узла - черный
- папа, дедушка и новый узел находятся на "одной стороне", т.е. на одной
  ветке.

Это означает, что, например, если мы будем строго идти по левым потомкам,
то мы пройдем через дедушку, папу и новый узел. Или аналогично если будем
идти по правым потомкам.

В этом случае:
- папа становится на место дедушки и меняет свой цвет (с красного на
  черный)
- дедушка становится вместо брата и меняет свой цвет (с черного на
  красный). При этом связь дедушки и дяди сохраняется.

~Вопрос 1~: Откуда мы знаем, что дедушка точно был черным? Вдруг он был красным?
Ответ: красным он быть не может. Потому что у нас красный папа (будь папа
черным, мы без проблем вставили в дерево новый красный узел). А у красных
узлов не может быть красных детей. Следовательно, дедушка у нас точно был
черным.

~Вопрос 2~: Как можно заменить брата на дедушку? Куда деть брата? Не
потеряем ли мы эту ветку?

Ответ: нет, не потеряем.
Папа может быть красным только если двое его детей -  это листья,
т.е. черные узлы без значений.

Да, в результате перебалансировки дерева мы можем перекрашивать узлы. И в
какой-то момент у нас возникнет ситуация, когда у нас будет красный узел,
из которого будут исходить два черных узла, которые не будут являться
листьями. Только вот уже никакой потомок к этому узлу мы не присоединим -
потомки все заняты.

Поэтому заменяя брата на дедушку, мы ничего не теряем. Брат - это лист,
пустой черный узел.

Чтоб это все выполнить мы:
- перекрашиваем папу в черный
- перекрашиваем деда в красный
- папа заменяет дедушку - теперь дедушка его потомок. А для прадедушки наш
  папа стал сыном.
- дедушка заменяет брата - теперь наш папа его отец. А дедушка - наш
  брат.
- устанавливаем в качестве потомков дедушки 2 черных листа

#+NAME: rotate_if_uncle_black_one_side
#+BEGIN_SRC lisp :noweb yes
  (defun rotate-if-uncle-black-one-side (node)
    (let* ((dad (get-dad node))
           (grand-dad (get-grand-dad node))
           (grand-grand-dad (get-dad grand-dad)))
      (format t " rotate-if-uncle-black-one-side grand dad: ")
      (print-tree t grand-dad 1)
      ;; перекрасили папу и дедушку
      (recolor-black dad)
      (recolor-red grand-dad)
      (let ((grand-dad-elt (node-elt grand-dad))
            (grand-dad-color (node-color grand-dad)))
        ;; (format t "copy grand-dad ~%")
        ;; (print-tree t copy-grand-dad 1)
        ;; дедушка - это корень (т.е. нет прадедушки)?
        (if (null grand-grand-dad)
            ;; папа становится новым корнем
            (progn
              (make-new-root grand-dad dad)
              (if (null (node-elt (node-l grand-dad)))
                  (setf (node-l grand-dad) (make-node :elt grand-dad-elt
                                                :color grand-dad-color))
                  (setf (node-r grand-dad) (make-node :elt grand-dad-elt
                                                      :color grand-dad-color))))

              ;; ;; копия дедушки становится на место брата
              ;; (format t " rotate-if-uncle-black-one-side dad: ")
              ;; (print-tree t dad 1)
              ;; dad)
            (progn
            ;; папа заменяет дедушку
            (set-new-child grand-grand-dad grand-dad dad)
            ;; дедушка заменяет брата
            (set-new-child dad (get-brother node) grand-dad)
            (format t " rotate-if-uncle-black-one-side dad: ")
            ;; устанавливаем дедушке вместо потомков два черных листа
            (add-leafs grand-dad)
            (print-tree t dad 1)
            dad)))))

  (defun make-new-root (old-node new-node)
    (setf (node-color old-node) (node-color new-node)
          (node-elt old-node) (node-elt new-node)
          (node-l old-node) (node-l new-node)
          (node-r old-node) (node-r new-node)))
#+END_SRC

Но есть ситуация хуже, чем когда папа красный, дядя черный, и дедушка,
папа и новый находятся на одной ветке.

Может быть, что папа и дедушка не на одной ветке, папа по-прежнему
красный, а дядя - по-прежнему черный.
Т.е. чтоб от деда дойти до нового узла, мы должны пройти сначала по
правой ветке, а потом по левой. Или наоборот.

В этом случае нужно совершить большой поворот. Сначала мы приводим
поддерево в состояние, когда у нас папа и дед на одной стороне, а затем
уже вращаем поддерево с помощью процедуры
~rotate-if-uncle-black-one-side~, которую написали выше.

Для этого нам банально нужно поменять папу и новый узел местами. Новый
узел станет папой, а папа - встанет вместо нового узла.
А уже из этого состояния мы вызовем ~rotate-if-uncle-black-one-side~.

#+NAME: rotate_if_uncle_black_diffrnt_sides
#+BEGIN_SRC lisp :noweb yes
  (defun rotate-if-uncle-black-diffrnt-sides (node)
    (let ((dad (get-dad node))
          (grand-dad (get-grand-dad node)))
      (set-new-child grand-dad dad node)
      (add-leafs dad)
      (if (< (get-value (node-elt dad))
             (get-value (node-elt node)))
          (progn
            (setf (node-l node) dad)
            (rotate-if-uncle-black-one-side dad))
          (progn
            (setf (node-r node) dad)
            (rotate-if-uncle-black-one-side dad)))))
#+END_SRC

#+NAME: insert_in_red_black_tree
#+BEGIN_SRC lisp :noweb yes :tangle r-b-tree.lisp
  <<print-r-b-tree>>
  <<r_b_node>>
  <<recolor_node>>
  <<predicats>>
  <<get_relatives>>
  <<add_leafs>>
  <<set_new_child>>
  <<recolor_black_dad_and_uncle>>
  <<rotate_if_uncle_black_one_side>>
  <<rotate_if_uncle_black_diffrnt_sides>>

  (defun recombine-tree (tree new-node)
    (print-tree t tree 1)
    (let* ((dad tree)
           (grand-dad (get-grand-dad new-node))
           (uncle (get-brother dad)))
      ;; вставка была в корень корень
      (cond ((and (black? dad) (null uncle) (null grand-dad))
             tree)
            ;; дядя и папа- красные
            ((and (red? dad) (red? uncle))
             (progn
               (format t "both are red ~%")
               (recolor-black-dad-and-uncle new-node)))
            ;; дядя черный, папа красный,
            ;; папа, дед и новый узел - на одной стороне
            ((and (on-one-side? grand-dad dad new-node)
                  (black? uncle)
                  (red? dad))
             (progn
               (format t "one side ~%")
               (rotate-if-uncle-black-one-side new-node)))
            ;; дядя черный, папа красный,
            ;; папа, дед и новый узел - на разных сторонах
            ((and (not (on-one-side? grand-dad dad new-node))
                  (black? uncle)
                  (red? dad))
             (progn
               (format t "diffrnt sides ~%")
               (rotate-if-uncle-black-diffrnt-sides new-node)))
            ;; папа черный, ничего пережелывать не надо
            (t tree))))

  (defun insert-in-red-black-tree-rec (tree elt)
    (if (null tree)
        (add-leafs (make-node :elt elt))
        (let ((node-value (node-elt tree)))
          (format t "tree elt ~A ~%" node-value)
          (cond ((< elt node-value)
                 ;; левая ветка
                 (if (leaf? (node-l tree))
                     ;; вставка
                     (progn
                       ;; вставили новую красную ноду и добавили к ней
                       ;; 2 черных листа
                       (format t "left leaf ~%")
                       (setf (node-l tree)
                             (add-leafs (make-node :elt elt
                                                   :color 'red
                                                   :parent tree)))
                       (recombine-tree tree (node-l tree)))
                     ;; иначе идем дальше
                     (insert-in-red-black-tree-rec (node-l tree) elt)))

                ((> elt node-value)
                 ;; правая ветка
                 (if (leaf? (node-r tree))
                     ;; вставка
                     (progn
                       (format t "right leaf ~%")
                       (setf (node-r tree)
                             (add-leafs (make-node :elt elt
                                                   :color 'red
                                                   :parent tree)))
                       (recombine-tree tree (node-r tree)))
                     ;; иначе идем дальше
                     (insert-in-red-black-tree-rec (node-r tree) elt)))
                (t tree)))))

  (defun make-red-black-tree (lst)
    (defun make-red-black-tree-rec (tree lst)
      (if (null lst)
          tree
          (progn
            (insert-in-red-black-tree-rec tree (car lst))
            (make-red-black-tree-rec (cdr lst)))))
    (make-red-black-tree-rec (insert-in-red-black-tree-rec nil (car lst))
                             (cdr lst)))


  (setf test-tree (insert-in-red-black-tree-rec nil 1))
  (insert-in-red-black-tree-rec test-tree 2)
  (insert-in-red-black-tree-rec test-tree 3)
  (insert-in-red-black-tree-rec test-tree 4)
  (insert-in-red-black-tree-rec test-tree 5)


  ;; (get-brother (node-r test-tree))

  ;; (insert-in-red-black-tree-rec nil 1)

  ;; (make-red-black-tree '(1 2 3 4 5))
#+END_SRC
