* Тестовое задание для стажера Go-программиста

Необходимо разработать кэширующий http-прокси (обратный прокси).

Условия задачи:
Утилита должна быть конфигурируема. В конфигурационном файле должны
задаваться значения для следующих параметров:
1.	адрес бэкенда (сайт, который будем проксировать);
2.	локальный порт, на котором утилита слушает запросы;
3.	максимальный размер кэша, в количестве записей.

Утилита должна работать следующим образом:
1.	принять HTTP GET запрос;
2.	если url есть в кэше, передать в ответ клиенту файл из кэша;
3.	если url нет в кэше:
    - переслать запрос на бэкенд;
    - прочитать ответ от бэкенда;
    - сохранить запись в кэш, если достигнут максимальный размер кэша
      перезаписать самую старую запись;
    - ответ передать клиенту.

Проксированием http-заголовков можно пренебречь — передаём на бэкенд
только заголовок Host и URL.

Шаги проверки:
1.	в конфигурационном файле задаем адрес бэкенда = «4pda.ru», локальный порт = 8080;
2.	в браузере пишем http://localhost:8080;
3.	в браузере открывается страница сайта 4pda.ru.

* Термины и понятия для понимания задания

Полезная статья
https://habr.com/ru/post/506356/

** Прокси

   Прокси — это серверное приложение, осуществляющее соединения или запросы
   от своего имени и сетевого адреса в пользу подключившегося к нему
   клиента, пересылая в результате ему все полученные данные.

** Прокси-сервер

   Это сервер-посредник. Через него можно передать сообщение, не раскрывая
   свой реальный адрес, таким образом обходя блокировки. Поэтому во время
   блокировки телега продолжала работать.

   Часто прокси-серверы кэшируют данные с популярных сайтов, поэтому
   загружая данные через прокси-сервер, можно ускорить доступ к этим ресурсам.

   Так же можможно сэкономить трафик, поскольку прокси-сервера могут сжимать
   запрашиваемый контент.

   Из минусов - проблемы с безопасностью
   [TODO:gmm] (какие? как решить?)


** DPI и активные пробы

   Это продвинутый метод проверки и управления сетевым трафиком. DPI
   представляет собой форму фильтрации пакетов, которая обнаруживает,
   идентифицирует, классифицирует, перенаправляет или блокирует пакеты с
   конкретными данными или полезной нагрузкой, которые обычная фильтрация
   пакетов (которая проверяет только заголовки пакетов) не может
   обнаружить.

   DPI проверяет содержимое пакетов, проходящих через заданную точку, и
   принимает решения в режиме реального времени на основе правил,
   назначенных компанией, провайдером или сетевым администратором, в
   зависимости от того, что содержит пакет.

   Более подробно см.сюда
   https://wiki.merionet.ru/seti/20/chto-takoe-texnologiya-dpi/

** Мультиплексирование

   Допустим, с одного и того же компа на один и тот же сервер шлются
   данные из разных приложений через одино и то же
   соединение. Получается, что несколько соединений идут через
   одно. Единственный способ отличить, от кого какие пакеты - это норме
   порта в заголовке пкета.

** http-прокси

   Это прокси-сервер, поддерживающий http-соединения (т.е. сервер ниче не
   шифрует дополнительно, просто пересылает пакеты).

** Запросы HTTP GET

Самый распространенный способ запросить данные у http-серевера.
Зарос состоит из:

- строки запроса
- заголовков

** URL

   Это фактически тот адрес сайта, который мы видим в адресной
   строке. Так пользователь может не вбивать ip ресурса, а пользоваться
   его именем.

   Традиционная форма записи URL:

   <схема>:[//[<логин>[:<пароль>]@]<хост>[:<порт>]][/<URL‐путь>][?<параметры>][#<якорь>]

- схема - сетевой протокол
- логин - им юзера для доступа к ресурсу
- пароль указанного юзера
- хост - полностью прописанное доменное имя или ip
- порт - порт ресурса
- URL-путь - уточняющая инфа о метоположении ресурса, зависит от сетевого
  протокола
- параметры - строка запроса с передаваемыми на сервер параметрами
- якорь - заголовок документа или его id

** Устройство кэша
[TODO:gmm] Найти инфу по кэшированию.

* Разжевываем задание

  Нужно создать сервер-посредник, который:

 - поддерживает http-сеодинения (т.е. без шифрования)

 - кэширует содержимое ресурсов, к которым уже осуществлялся доступ

 - принимает запросы HTTP GET - т.е. запрос от клиента на какой-то
   ресурс

 - если доступ к ресурсу ранее запрашивался, то сервер возврашает данные
   из кэша клиенту

 - в противном случае сервер запрашивает у ресурса данные от своего
   имени, сохраняет эти данные в кэш - если места больше нет, то
   перезаписывает самую старую запись кэша - и отправляет данные клиенту,
   который их запрашивал

При этом при запуске прокси-сервера мы должны указать:

- сайт, к которому будет осуществляться доступ - ресурс, у которого мы
  будем просить данные

- локальный порт, на котором наш сервер будет слушать запросы

- максимальный размер кэша в количестве записей

** Стек технологий

Пакет http, там есть все:
https://golang.org/pkg/net/http/
